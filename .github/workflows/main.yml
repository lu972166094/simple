name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Windows:
    runs-on: windows-2019 
    needs: Linux
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x86
        - arch: x64

    steps:
    - name: "Set Build Type"
      id: build_type
      run: |
        if ("${{ github.ref }}".StartsWith("refs/tags/")) {
          echo "BUILD_TYPE::Release";
          echo "::set-output name=BUILD_TYPE::Release";
        } else {
          echo "BUILD_TYPE::Debug";
          echo "::set-output name=BUILD_TYPE::Debug";
        }

        if ("${{ matrix.arch }}" -eq "x64") {
          echo "Arch:x64";
          echo "::set-output name=BUILD_ARCH::x64";
        } else {
          echo "Arch:Win32";
          echo "::set-output name=BUILD_ARCH::Win32";
        }

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # https://github.com/OpenTTD/OpenTTD/blob/master/.github/workflows/ci-build.yml
    # "restore-cache" which is done by "run-vcpkg" uses Windows tar.
    # A git clone on windows marks a few files as read-only; when Windows tar
    # tries to extract the cache over this folder, it fails, despite the files
    # being identical. This failure shows up as an warning in the logs. We
    # avoid this by simply removing the read-only mark from the git folder.
    # In other words: this is a hack!
    # See: https://github.com/lukka/run-vcpkg/issues/61
    # - name: Remove read-only flag from vcpkg git folder
    #   shell: powershell
    #   run: |
    #     attrib -r "c:\vcpkg\.git\*.*" /s
    # - name: Prepare vcpkg (with cache)
    #   uses: lukka/run-vcpkg@v6
    #   with:
    #     vcpkgDirectory: 'c:/vcpkg'
    #     doNotUpdateVcpkg: true
    #     vcpkgArguments: 'liblzma libpng lzo zlib'
    #     vcpkgTriplet: '${{ matrix.arch }}-windows-static'

    # - name: Install MSVC problem matcher
    #   uses: ammaraskar/msvc-problem-matcher@master

    - name: 'Run CMake with VS16'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: "${{ github.workspace }}/../../_temp/windows"
        useVcpkgToolchainFile: true
        cmakeBuildType: ${{ steps.build_type.outputs.BUILD_TYPE }}
        buildWithCMake: true
        cmakeGenerator: VS16Win64 
        cmakeAppendedArgs: -A ${{steps.build_type.outputs.BUILD_ARCH  }}
        buildWithCMakeArgs: --config ${{ steps.build_type.outputs.BUILD_TYPE }}
        
    - name: "Check file existence"
      uses: andstor/file-existence-action@v1
      with:
        allow_failure: true
        files: "${{ github.workspace }}/../../_temp/windows/src/${{ steps.build_type.outputs.BUILD_TYPE }}/simple.dll, ${{ github.workspace }}/../../_temp/windows/cppjieba/src/cppjieba/dict/jieba.dict.utf8"

    - name: Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir libsimple-windows-${{ matrix.arch }}
        Copy-Item -Path src/${{ steps.build_type.outputs.BUILD_TYPE }}/simple.dll,cppjieba/src/cppjieba/dict/ -Destination libsimple-windows-${{ matrix.arch }}/ -Recurse
        Compress-Archive -Path libsimple-windows-${{ matrix.arch }} -DestinationPath libsimple-windows-${{ matrix.arch }}.zip
      working-directory: "${{ github.workspace }}/../../_temp/windows/"
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ${{ github.workspace }}/../../_temp/windows/libsimple-windows-${{ matrix.arch }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  Linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
        - os: ubuntu-18.04
    steps:
    - name: "Release Build Type"
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV
  